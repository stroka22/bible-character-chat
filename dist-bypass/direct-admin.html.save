nano public/direct-admin.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Direct Admin Panel - Bible Characters</title>
    <!-- Tailwind CSS CDN for quick styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
            background-color: #f8fafc; /* slate-50 */
            color: #1e293b; /* slate-800 */
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 2rem;
        }
        section {
            background-color: #ffffff;
            padding: 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            margin-bottom: 2rem;
        }
        input[type="text"],
        input[type="url"],
        textarea {
            border: 1px solid #e2e8f0; /* slate-200 */
            border-radius: 0.375rem;
            padding: 0.5rem 0.75rem;
            width: 100%;
            box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        }
        input[type="text"]:focus,
        input[type="url"]:focus,
        textarea:focus {
            border-color: #3b82f6; /* blue-500 */
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25);
            outline: none;
        }
        button {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 600;
            transition: background-color 0.15s ease-in-out;
        }
        .btn-primary {
            background-color: #2563eb; /* blue-600 */
            color: #ffffff;
        }
        .btn-primary:hover {
            background-color: #1d4ed8; /* blue-700 */
        }
        .btn-secondary {
            background-color: #e2e8f0; /* slate-200 */
            color: #1e293b; /* slate-800 */
        }
        .btn-secondary:hover {
            background-color: #cbd5e1; /* slate-300 */
        }
        .btn-danger {
            background-color: #ef4444; /* red-500 */
            color: #ffffff;
        }
        .btn-danger:hover {
            background-color: #dc2626; /* red-600 */
        }
        .message {
            padding: 0.75rem;
            border-radius: 0.375rem;
            margin-bottom: 1rem;
        }
        .message.success {
            background-color: #dcfce7; /* green-100 */
            color: #16a34a; /* green-600 */
        }
        .message.error {
            background-color: #fee2e2; /* red-100 */
            color: #dc2626; /* red-600 */
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0; /* slate-200 */
        }
        th {
            background-color: #f8fafc; /* slate-50 */
            font-weight: 600;
            text-transform: uppercase;
            font-size: 0.75rem;
            color: #64748b; /* slate-500 */
        }
        .truncate {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px; /* Adjust as needed */
        }
    </style>
</head>
<body>
    <div class="container">
        <h1 class="text-3xl font-bold text-center mb-6">Direct Admin Panel - Bible Characters</h1>

        <div id="messages"></div>

        <!-- Section A: Bulk Upload -->
        <section>
            <h2 class="text-2xl font-semibold mb-4">Bulk Upload Characters (CSV)</h2>
            <p class="text-gray-600 mb-4">
                Upload a CSV file to add or update multiple characters.
                Expected fields: `name`, `avatar_url`, `feature_image_url`, `short_biography`,
                `bible_book`, `opening_line`, `persona_prompt`, `scriptural_context`, `description`.
            </p>
            <input type="file" id="csvFileInput" accept=".csv" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
            <button id="uploadCsvBtn" class="mt-4 btn-primary">Upload CSV</button>
        </section>

        <!-- Section B: Manual Character Creation/Edit Form -->
        <section>
            <h2 class="text-2xl font-semibold mb-4" id="formTitle">Create New Character</h2>
            <form id="characterForm" class="space-y-4">
                <div>
                    <label for="name" class="block text-sm font-medium text-gray-700">Character Name</label>
                    <input type="text" id="name" required>
                </div>
                <div>
                    <label for="avatar_url" class="block text-sm font-medium text-gray-700">Avatar URL</label>
                    <input type="url" id="avatar_url">
                </div>
                <div>
                    <label for="feature_image_url" class="block text-sm font-medium text-gray-700">Feature Image URL</label>
                    <input type="url" id="feature_image_url">
                </div>
                <div>
                    <label for="short_biography" class="block text-sm font-medium text-gray-700">Short Biography</label>
                    <textarea id="short_biography" rows="3"></textarea>
                </div>
                <div>
                    <label for="description" class="block text-sm font-medium text-gray-700">Description (for character card)</label>
                    <textarea id="description" rows="3" required></textarea>
                </div>
                <div>
                    <label for="bible_book" class="block text-sm font-medium text-gray-700">Bible Book</label>
                    <input type="text" id="bible_book">
                </div>
                <div>
                    <label for="opening_line" class="block text-sm font-medium text-gray-700">Opening Sentence</label>
                    <textarea id="opening_line" rows="2"></textarea>
                </div>
                <div>
                    <label for="persona_prompt" class="block text-sm font-medium text-gray-700">Persona Prompt</label>
                    <textarea id="persona_prompt" rows="5" required></textarea>
                </div>
                <div>
                    <label for="scriptural_context" class="block text-sm font-medium text-gray-700">Scriptural Context</label>
                    <textarea id="scriptural_context" rows="3"></textarea>
                </div>
                <div class="flex space-x-4">
                    <button type="submit" id="saveCharacterBtn" class="btn-primary">Create Character</button>
                    <button type="button" id="cancelEditBtn" class="btn-secondary hidden">Cancel Edit</button>
                </div>
            </form>
        </section>

        <!-- Existing Characters List -->
        <section>
            <h2 class="text-2xl font-semibold mb-4">Existing Characters</h2>
            <input type="text" id="characterSearch" placeholder="Search by name, description, or bible book..." class="mb-4">
            <div class="overflow-x-auto">
                <table id="charactersTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Bible Book</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Characters will be loaded here -->
                    </tbody>
                </table>
            </div>
            <p id="noCharactersMessage" class="text-gray-500 italic mt-4 hidden">No characters found.</p>
        </section>
    </div>

    <!-- Supabase CDN -->
    <!--
        Using Supabase JS v2 from CDN.
        The global object exposed by this script is `supabaseJs`.
        We will use `supabaseJs.createClient` to initialize the client.
    -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script>
        // --- Supabase Configuration ---
        // IMPORTANT: Replace with your actual Supabase URL and Anon Key.
        // These values are typically loaded from environment variables in a React app,
        // but for this standalone HTML file, they must be hardcoded or dynamically injected.
        const SUPABASE_URL = 'YOUR_SUPABASE_URL'; // e.g., 'https://your-project-id.supabase.co'
        const SUPABASE_ANON_KEY = 'YOUR_SUPABASE_ANON_KEY'; // e.g., 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

        // Initialize Supabase client using the `supabaseJs` global object
        // provided by the CDN script.
        const supabase = supabaseJs.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // --- Helper Functions ---
        function showMessage(message, type) {
            const messagesDiv = document.getElementById('messages');
            messagesDiv.innerHTML = `<div class="message ${type}">${message}</div>`;
            setTimeout(() => messagesDiv.innerHTML = '', 5000);
        }

        // Basic CSV Parser
        function parseCSV(csvText) {
            const lines = csvText.trim().split('\n');
            if (lines.length === 0) return [];

            const headers = lines[0].split(',').map(header => header.trim());
            const data = lines.slice(1).map(line => {
                const values = line.split(',').map(value => value.trim());
                const row = {};
                headers.forEach((header, index) => {
                    row[header] = values[index];
                });
                return row;
            });
            return data;
        }

        // --- Supabase Connection Debug ---
        async function checkSupabaseConnection() {
            try {
                // Attempt to fetch a small amount of data to test connection
                const { data, error } = await supabase.from('characters').select('id').limit(1);
                if (error) throw error;
                showMessage('Supabase connection: Connected successfully!', 'success');
            } catch (error) {
                console.error('Supabase connection error:', error);
                showMessage(`Supabase connection: Error - ${error.message}. Check your URL and Anon Key.`, 'error');
            }
        }

        // --- Character Management Functions ---
        let editingCharacterId = null;

        async function fetchCharacters(searchQuery = '') {
            const tableBody = document.querySelector('#charactersTable tbody');
            const noCharactersMessage = document.getElementById('noCharactersMessage');
            tableBody.innerHTML = '<tr><td colspan="4" class="text-center py-4">Loading characters...</td></tr>';
            noCharactersMessage.classList.add('hidden');

            try {
                let query = supabase.from('characters').select('*');

                if (searchQuery) {
                    query = query.or(`name.ilike.%${searchQuery}%,description.ilike.%${searchQuery}%,bible_book.ilike.%${searchQuery}%`);
                }
                query = query.order('name');

                const { data, error } = await query;

                if (error) throw error;

                tableBody.innerHTML = '';
                if (data.length === 0) {
                    noCharactersMessage.classList.remove('hidden');
                } else {
                    data.forEach(character => {
                        const row = tableBody.insertRow();
                        row.innerHTML = `
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center">
                                    ${character.avatar_url ? `<img src="${character.avatar_url}" alt="${character.name}" class="h-10 w-10 rounded-full mr-2 object-cover">` : ''}
                                    <div class="text-sm font-medium text-gray-900">${character.name}</div>
                                </div>
                            </td>
                            <td class="px-6 py-4"><div class="text-sm text-gray-500 truncate">${character.description}</div></td>
                            <td class="px-6 py-4 whitespace-nowrap"><div class="text-sm text-gray-500">${character.bible_book || '-'}</div></td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <button data-id="${character.id}" class="text-blue-600 hover:text-blue-800 mr-4 edit-btn">Edit</button>
                                <button data-id="${character.id}" class="text-red-600 hover:text-red-800 delete-btn">Delete</button>
                            </td>
                        `;
                    });

                    document.querySelectorAll('.edit-btn').forEach(button => {
                        button.addEventListener('click', (e) => editCharacter(e.target.dataset.id));
                    });
                    document.querySelectorAll('.delete-btn').forEach(button => {
                        button.addEventListener('click', (e) => deleteCharacter(e.target.dataset.id));
                    });
                }
            } catch (error) {
                console.error('Error fetching characters:', error);
                showMessage(`Error fetching characters: ${error.message}`, 'error');
            }
        }

        async function createCharacter(characterData) {
            try {
                const { data, error } = await supabase
                    .from('characters')
                    .insert([characterData])
                    .select()
                    .single();

                if (error) throw error;

                showMessage('Character created successfully!', 'success');
                fetchCharacters();
                resetForm();
                return data;
            } catch (error) {
                console.error('Error creating character:', error);
                showMessage(`Error creating character: ${error.message}`, 'error');
                throw error;
            }
        }

        async function updateCharacter(id, characterData) {
            try {
                const { data, error } = await supabase
                    .from('characters')
                    .update(characterData)
                    .eq('id', id)
                    .select()
                    .single();

                if (error) throw error;

                showMessage('Character updated successfully!', 'success');
                fetchCharacters();
                resetForm();
                return data;
            } catch (error) {
                console.error('Error updating character:', error);
                showMessage(`Error updating character: ${error.message}`, 'error');
                throw error;
            }
        }

        async function deleteCharacter(id) {
            if (!confirm('Are you sure you want to delete this character? This action cannot be undone.')) {
                return;
            }

            try {
                const { error } = await supabase
                    .from('characters')
                    .delete()
                    .eq('id', id);

                if (error) throw error;

                showMessage('Character deleted successfully!', 'success');
                fetchCharacters();
            } catch (error) {
                console.error('Error deleting character:', error);
                showMessage(`Error deleting character: ${error.message}`, 'error');
            }
        }

        async function editCharacter(id) {
            try {
                const { data, error } = await supabase
                    .from('characters')
                    .select('*')
                    .eq('id', id)
                    .single();

                if (error) throw error;

                // Set form values
                document.getElementById('name').value = data.name || '';
                document.getElementById('avatar_url').value = data.avatar_url || '';
                document.getElementById('feature_image_url').value = data.feature_image_url || '';
                document.getElementById('short_biography').value = data.short_biography || '';
                document.getElementById('description').value = data.description || '';
                document.getElementById('bible_book').value = data.bible_book || '';
                document.getElementById('opening_line').value = data.opening_line || '';
                document.getElementById('persona_prompt').value = data.persona_prompt || '';
                document.getElementById('scriptural_context').value = data.scriptural_context || '';

                // Update form state
                editingCharacterId = id;
                document.getElementById('formTitle').textContent = 'Edit Character';
                document.getElementById('saveCharacterBtn').textContent = 'Update Character';
                document.getElementById('cancelEditBtn').classList.remove('hidden');

                // Scroll to form
                document.getElementById('formTitle').scrollIntoView({ behavior: 'smooth' });
            } catch (error) {
                console.error('Error fetching character for edit:', error);
                showMessage(`Error fetching character: ${error.message}`, 'error');
            }
        }

        function resetForm() {
            document.getElementById('characterForm').reset();
            editingCharacterId = null;
            document.getElementById('formTitle').textContent = 'Create New Character';
            document.getElementById('saveCharacterBtn').textContent = 'Create Character';
            document.getElementById('cancelEditBtn').classList.add('hidden');
        }

        async function handleBulkUpload(csvFile) {
            try {
                const text = await csvFile.text();
                const parsedData = parseCSV(text);
                
                if (parsedData.length === 0) {
                    throw new Error('No valid data found in CSV file');
                }

                // Map CSV data to character structure
                const characters = parsedData.map(row => ({
                    name: row.name || row.character_name || '',
                    avatar_url: row.avatar_url || '',
                    feature_image_url: row.feature_image_url || '',
                    short_biography: row.short_biography || '',
                    description: row.description || '',
                    bible_book: row.bible_book || '',
                    opening_line: row.opening_line || row.opening_sentence || '',
                    persona_prompt: row.persona_prompt || '',
                    scriptural_context: row.scriptural_context || ''
                })).filter(char => char.name && char.persona_prompt); // Basic validation

                if (characters.length === 0) {
                    throw new Error('No valid characters found in CSV. Ensure required fields (name, persona_prompt) are present.');
                }

                const { data, error } = await supabase
                    .from('characters')
                    .insert(characters);

                if (error) throw error;

                showMessage(`Successfully uploaded ${characters.length} characters!`, 'success');
                fetchCharacters();
            } catch (error) {
                console.error('Error uploading CSV:', error);
                showMessage(`Error uploading CSV: ${error.message}`, 'error');
            }
        }

        // --- Event Listeners ---
        document.addEventListener('DOMContentLoaded', () => {
            // Add debug button to header
            const headerDiv = document.querySelector('h1').parentNode;
            const debugBtn = document.createElement('button');
            debugBtn.textContent = 'Check Supabase Connection';
            debugBtn.className = 'btn-secondary mb-4';
            debugBtn.addEventListener('click', checkSupabaseConnection);
            headerDiv.insertBefore(debugBtn, document.getElementById('messages'));

            // Initial character load
            fetchCharacters();

            // Form submission
            document.getElementById('characterForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                
                const characterData = {
                    name: document.getElementById('name').value,
                    avatar_url: document.getElementById('avatar_url').value,
                    feature_image_url: document.getElementById('feature_image_url').value,
                    short_biography: document.getElementById('short_biography').value,
                    description: document.getElementById('description').value,
                    bible_book: document.getElementById('bible_book').value,
                    opening_line: document.getElementById('opening_line').value,
                    persona_prompt: document.getElementById('persona_prompt').value,
                    scriptural_context: document.getElementById('scriptural_context').value
                };

                try {
                    if (editingCharacterId) {
                        await updateCharacter(editingCharacterId, characterData);
                    } else {
                        await createCharacter(characterData);
                    }
                } catch (error) {
                    // Error is already handled in the functions
                }
            });

            // Cancel edit button
            document.getElementById('cancelEditBtn').addEventListener('click', resetForm);

            // CSV upload
            document.getElementById('uploadCsvBtn').addEventListener('click', () => {
                const fileInput = document.getElementById('csvFileInput');
                if (fileInput.files.length > 0) {
                    handleBulkUpload(fileInput.files[0]);
                } else {
                    showMessage('Please select a CSV file first', 'error');
                }
            });

            // Character search
            document.getElementById('characterSearch').addEventListener('input', (e) => {
                fetchCharacters(e.target.value);
            });
        });
    </script>
</body>
</html>
